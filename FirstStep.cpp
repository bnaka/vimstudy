/*
	FirstStepのためのソース
*/

#include <stdio.h>

int main(int argc, char const* argv[])
{
{ { { {
}}
}}
	int a;
	int b;
	int c;

	* おさらい
	ノーマルモード(def)
	インサートモード(i)
	コマンドモード(:)
	ビジュアルモード(v)

	基本移動(hjklw0$)
	削除(xd)
	取消(u)
	取消の取消<C-r>
	コピペ(yp)
	文字置き換え(r)
	変更(c)
	検索(/%)
	置換(:s//)
	外部コマンド(:!)
	オプション設定(:set)
	ヘルプ(:help)
	vimrc(:.vimrc)
	コマンドライン補完(:a<tab>)  

	* ビジュアルモード補足  
	`CTRL-V` で矩形選択になります。  

	* インサートモード補足  
	`I` で行の先頭の文字の手前から編集を開始  
	`s` でカーソル位置の文字を消してから編集を開始  
	`C` でカーソル位置から後方の全ての文字を消して編集を開始  
	`cc` で行内の全ての文字を消して編集を開始  
	`CTRL-V` と`I` を利用すると複数の行の特定の列に文字列を挿入することが出来る。  

	* 移動  
	`gj` `gk` で見たままに移動(折り返しを無視できる)  
	`H` で画面上の一番上の行に移動  
	`L` で画面上の一番下の行に移動  
	`M` で画面上の真ん中の行に移動  
	`gg` でファイルの一番上（１行目）に移動  
	`G` でファイルの一番下（最終行）に移動  
	`{` で直近の空行に移動  
	`}` で直後の空行に移動  
	`f [key]` で次に現れる[key]に移動  
	`t [key]` で次に現れる[key]の手前に移動  
	チートシート: https://bitbucket.org/tednaleid/vim-shortcut-wallpaper/raw/tip/vim-shortcuts.png  

	* ジャンプ  
	`CTRL-o` でカーソル位置を戻る  
	`CTRL-i` でカーソル位置を進む  

	* 検索補足  
	`?` で`/` の逆順検索になります  
	`*` を単語の上で行うとその単語を検索対象とします  
	`#` で`*` の`?` バージョンになります  

	* スクロール  
	`CTRL-f` で1ページ分下にスクロール  
	`CTRL-b` で1ページ分上にスクロール  
	`CTRL-e` で1行分上にスクロール  
	`CTRL-y` で1行分下にスクロール  

	* ウィンドウ分割  
	`:sp` で横に分割  
	`:vs` で縦に分割  
	`CTRL-w w` で分割したウィンドウを順繰りに移動  
	`CTRL-w [hjkl]` で分割したウィンドウを左下上右移動  

	* タグ検索  
	`CTRL-w f` でファイル名の上で実行するとそのファイルをウィンドウ分割して開く  
		README.md
	`CTRL-w i` で単語の上で実行するとその単語を定義した場所にウィンドウ分割して移動  
	`CTRL-w ]` でタグファイルの定義箇所へ移動(ctags)  

	* バッファ  
	`:buffers` で開いているバッファの一覧を表示  
	`:b <数値>` で`:buffers`の一覧にある数値のバッファを開く  
	開いたあとに保存し忘れたバッファ(+が付く)などを確認することが出来ます。  

	* インデント操作  
	`>>` でその行を右にインデントする  
	`<<` でその行を左にインデントする  
	`==` でその行を自動インデントに調整する  
	ヴィジュアルモードで選択後にインデント操作を行なうと選択範囲を対象として実行される。  

	* 数値インクリメント/デクリメント  
	`CTRL-a` を数値の上で実行するとインクリメントする  
	`CTRL-x` を数値の上で実行するとデクリメントする  
	カーソル直下である必要はなく、行内で一番近い数値に勝手に移動してくれます。  

	* 大文字小文字を切り替える  
	ビジュアルモードで選択後 `U` で大文字化  
	ビジュアルモードで選択後 `u` で小文字化  

	* テキストオブジェクト  
	`diw` でカーソル位置の単語を削除  
	`da(` で()で囲われた中身と括弧自身を消す  
	`di(` で()で囲われた中身のみを消す  
	`va[` で[]で囲われた中身と括弧自身を選択する  
	`ci"` で""で囲われた中身を消して編集を開始する"  
	`dip` で段落(空行で囲まれたブロック)の中身のみを消す  
	dやvやcはしたいこと。  
	aはall、iはinnerの意味。  
	`(`や`[`がテキストオブジェクトの指定。  
	もっと知りたい場合は`:help text-object`を引来ましょう。  

	####それVim
	「それVimで出来るよ」という内容を紹介していきます。  
	プログラマーが使いそうなものが中心です。  

	###### 1. makeする
	* `:make`  
	Vimを開いたまま`$ make`を行います。  
	コンパイルした場合はエラーが出た場合、その場所に移動してくれます。  

	* `:cn` および `:cp`  
	エラーが出ていた場合に、`:cn` で次のエラーに `:cp` で前のエラーに移動します。  
	`:cp` は `:cN` で代用可能。  

	* `:copen`  
	エラーの内容をQuickFixウィンドウで表示します。  
	上述の`:cn` などで移動したときに表示が追従してくれます。  
	あとどれくらいエラーがあるのかなどを確認することが出来ます。  

	###### 2. grepする
	* `:grep [単語] [grep対象]`  
	Vimを開いたまま`$ grep`を行います。  
	grepの対象が存在した場合、その場所に移動してくれます。  

	* `:cn` および `:cp` および `:copen`  
	`:make` と同様な動作を行います。  
	`:c` で始まるものはQuickFixウィンドウを操作するコマンドと覚えると良い。  

	###### 3. 補完する
	* インサートモード中に`CTRL-n`  
	ウィンドウ内にある単語を補完候補として表示します。  
	単語を打っている途中で`CTRL-n`を行うことで、該当する単語を絞り込めます。  

	* 補完候補表示中に`CTRL-n` および `CTRL-p`  
	補完候補を上下に選択できます。  

	###### 4. ディレクトリを確認する
	* `:pwd`  
	カレントディレクトリを表示します。  

	* `:e .` および `$ vim directory`  
	ディレクトリ自体をVimで開こうとすると、ファイル一覧を表示するモードに切り替わります。  
	移動してファイルを選んで`<ENTER>` でファイルを開きます。  

	###### 5. 直前の編集作業を繰り返す  
	* `.`  
	ノーマルモード中に `.` で直前の編集操作を繰り返すことができます。  

	* 例) 複数ある「hoge」という文字を「piyo」に変えたい。  
	`/hoge<CR>` してhogeを検索。  
	`cwpiyo<ESC>` で1つ目のhogeを「piyoに変更」。  
	`n` で次のhogeに移動し、`.`で「piyoに変更(`cwpiyo<ESC>`)」を繰り返す。  
	`n` など移動に関しては`.`の操作に含まれません。  

	###### 6. 操作の記録と再生
	`.` では直前の編集だけでしたが、一連の流れを繰り返すことができます。  
	* `q[key]`  
	[key]に対して記録を開始する。  

	* `q`  
	記録を終了する。  

	* `@[key]`  
	[key]に記録した内容を再生する。  

	* 例) 複数ある「hoge」という文字を「piyo」に変えたいを移動も含めて繰り返す。  
	`qa` でaに記録を開始。  
	上述の繰り返しの作業を1度だけ行う。(`.` も記録されてしまうので行わない)  
	`q` で記録の終了。  
	`@a` で記録の再生し繰り返す。  

	###### 7. Vimの一時停止  
	* `CTRL-z`  
	Vimをバックグラウンドに移し、一時的に抜けられます。  
	`$ fg` で戻って来れます。(バックグラウンドで起動したプロセスを前面に出すシェルコマンド)  

	* `:sh`  
	こちらもVimから新しいシェルを立ち上げることで、一時的に抜けられます。  
	`$ exit` で戻って来れます。(シェルを終わらせるコマンド)  

	###### 8. キーマップを作る
	* `:(mode)map [srckey] [dstkey]`  
	srckeyを入力するとdstkeyを入力したことにする。  
	modeは  
	 * `:nmap` ノーマルモード時のマップ
	 * `:imap` インサートモード時のマップ
	 * `:cmap` コマンドモード時のマップ
	 * `:vmap` ヴィジュアルモード時のマップ  
	 * `:map` 全てのモード時のマップ  
	例えば `:nmap <CTRL-n> :cn<CR>` などです。  
	いつも使うコマンドなどをキーにマップしておくことで効率を上げられます。  
	`:unmap [srckey]` で元に戻す  

	return 0;
}
